package tech.antibytes.banana.tokenizer

import tech.antibytes.banana.BananaRuntimeError
import tech.antibytes.banana.tokenizer.TokenizerContract.Reader

// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: /Users/d4l000126/projects/own/banana-i18n-kmp/banana-i18n/flex/BananaTokenizer.flex
// See https://github.com/jflex-de/jflex/issues/222
internal class BananaTokenizer(`in`: Reader) {
    /** Input device.  */
    private var zzReader: Reader = `in`

    /** Current state of the DFA.  */
    private var zzState = 0

    /** Current lexical state.  */
    private var zzLexicalState = YYINITIAL

    /**
     * This buffer contains the current text to be matched and is the source of the [.yytext]
     * string.
     */
    private var zzBuffer = CharArray(ZZ_BUFFERSIZE)

    /** Text position at the last accepting state.  */
    private var zzMarkedPos = 0

    /** Current text position in the buffer.  */
    private var zzCurrentPos = 0

    /** Marks the beginning of the [.yytext] string in the buffer.  */
    private var zzStartRead = 0

    /** Marks the last character in the buffer, that has been read from input.  */
    private var zzEndRead = 0

    /**
     * Whether the scanner is at the end of file.
     * @see .yyatEOF
     */
    private var zzAtEOF = false

    /**
     * The number of occupied positions in [.zzBuffer] beyond [.zzEndRead].
     *
     *
     * When a lead/high surrogate has been read from the input stream into the final
     * [.zzBuffer] position, this will have a value of 1; otherwise, it will have a value of 0.
     */
    private var zzFinalHighSurrogate = 0

    /** Number of newlines encountered up to the start of the matched text.  */
    private var yyline = 0

    /** Number of characters from the last newline up to the start of the matched text.  */
    private var yycolumn = 0

    /** Number of characters up to the start of the matched text.  */
    private var yychar: Long = 0

    /** Whether the scanner is currently at the beginning of a line.  */
    private var zzAtBOL = true

    /** Whether the user-EOF-code has already been executed.  */
    private var zzEOFDone = false

    /**
     * Refills the input buffer.
     *
     * @return `false` iff there was new input.
     * @exception java.io.Exception  if any I/O-Error occurs
     */
    @Throws(Exception::class)
    private fun zzRefill(): Boolean {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate
            zzFinalHighSurrogate = 0
            zzBuffer.copyInto(
                destination = zzBuffer,
                destinationOffset = 0,
                startIndex = zzStartRead,
                endIndex = zzEndRead - zzStartRead
            )

            /* translate stored positions */zzEndRead -= zzStartRead
            zzCurrentPos -= zzStartRead
            zzMarkedPos -= zzStartRead
            zzStartRead = 0
        }

        /* is the buffer big enough? */if (zzCurrentPos >= zzBuffer.size - zzFinalHighSurrogate) {
            /* if not: blow it up */
            val newBuffer = CharArray(zzBuffer.size * 2)
            zzBuffer.copyInto(destination = newBuffer)
            zzBuffer = newBuffer
            zzEndRead += zzFinalHighSurrogate
            zzFinalHighSurrogate = 0
        }

        /* fill the buffer with new input */
        val requested = zzBuffer.size - zzEndRead
        val numRead: Int = zzReader.read(zzBuffer, zzEndRead, requested)

        /* not supposed to occur according to specification of Reader */if (numRead == 0) {
            throw Exception(
                "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround."
            )
        }
        if (numRead > 0) {
            zzEndRead += numRead
            if (zzBuffer[zzEndRead - 1].isHighSurrogate()) {
                if (numRead == requested) { // We requested too few chars to encode a full Unicode character
                    --zzEndRead
                    zzFinalHighSurrogate = 1
                } else { // There is room in the buffer for at least one more char
                    val c: Int = zzReader.read() // Expecting to read a paired low surrogate char
                    if (c == -1) {
                        return true
                    } else {
                        zzBuffer[zzEndRead++] = c.toChar()
                    }
                }
            }
            /* potentially more input available */return false
        }

        /* numRead < 0 ==> end of stream */return true
    }

    /**
     * Closes the input reader.
     *
     * @throws java.io.Exception if the reader could not be closed.
     */
    @Throws(Exception::class)
    private fun yyclose() {
        zzAtEOF = true // indicate end of file
        zzEndRead = zzStartRead // invalidate buffer
        zzReader.close()
    }

    /**
     * Resets the scanner to read from a new input stream.
     *
     *
     * Does not close the old reader.
     *
     *
     * All internal variables are reset, the old input stream **cannot** be reused (internal
     * buffer is discarded and lost). Lexical state is set to `ZZ_INITIAL`.
     *
     *
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader The new input stream.
     */
    private fun yyreset(reader: Reader) {
        zzReader = reader
        zzEOFDone = false
        yyResetPosition()
        zzLexicalState = YYINITIAL
        if (zzBuffer.size > ZZ_BUFFERSIZE) {
            zzBuffer = CharArray(ZZ_BUFFERSIZE)
        }
    }

    /**
     * Resets the input position.
     */
    private fun yyResetPosition() {
        zzAtBOL = true
        zzAtEOF = false
        zzCurrentPos = 0
        zzMarkedPos = 0
        zzStartRead = 0
        zzEndRead = 0
        zzFinalHighSurrogate = 0
        yyline = 0
        yycolumn = 0
        yychar = 0L
    }

    /**
     * Returns whether the scanner has reached the end of the reader it reads from.
     *
     * @return whether the scanner has reached EOF.
     */
    private fun yyatEOF(): Boolean {
        return zzAtEOF
    }

    /**
     * Returns the current lexical state.
     *
     * @return the current lexical state.
     */
    private fun yystate(): Int {
        return zzLexicalState
    }

    /**
     * Enters a new lexical state.
     *
     * @param newState the new lexical state
     */
    private fun yybegin(newState: Int) {
        zzLexicalState = newState
    }

    /**
     * Returns the text matched by the current regular expression.
     *
     * @return the matched text.
     */
    private fun yytext(): String {
        return zzBuffer.concatToString(zzStartRead, zzStartRead + (zzMarkedPos - zzStartRead))
    }

    /**
     * Returns the character at the given position from the matched text.
     *
     *
     * It is equivalent to `yytext().charAt(pos)`, but faster.
     *
     * @param position the position of the character to fetch. A value from 0 to `yylength()-1`.
     *
     * @return the character at `position`.
     */
    private fun yycharat(position: Int): Char {
        return zzBuffer[zzStartRead + position]
    }

    /**
     * How many characters were matched.
     *
     * @return the length of the matched text region.
     */
    private fun yylength(): Int {
        return zzMarkedPos - zzStartRead
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     *
     * They will be read again by then next call of the scanning method.
     *
     * @param number the number of characters to be read again. This number must not be greater than
     * [.yylength].
     */
    private fun yypushback(number: Int) {
        if (number > yylength()) zzScanError(ZZ_PUSHBACK_2BIG)
        zzMarkedPos -= number
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of input is encountered
     * or an I/O-Error occurs.
     *
     * @return the next token.
     * @exception java.io.Exception if any I/O-Error occurs.
     */
    @Throws(Exception::class)
    private fun yylex(): Any? {
        var zzInput: Int
        var zzAction: Int

        // cached fields:
        var zzCurrentPosL: Int
        var zzMarkedPosL: Int
        var zzEndReadL = zzEndRead
        var zzBufferL = zzBuffer
        val zzTransL = ZZ_TRANS
        val zzRowMapL = ZZ_ROWMAP
        val zzAttrL = ZZ_ATTRIBUTE
        while (true) {
            zzMarkedPosL = zzMarkedPos
            var zzR = false
            var zzCh: Int
            var zzCharCount: Int
            zzCurrentPosL = zzStartRead
            while (zzCurrentPosL < zzMarkedPosL) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL)
                zzCharCount = Character.charCount(zzCh)
                when (zzCh.toChar()) {
                    '\u000B', '\u000C', '\u0085', '\u2028', '\u2029' -> {
                        yyline++
                        yycolumn = 0
                        zzR = false
                    }
                    '\r' -> {
                        yyline++
                        yycolumn = 0
                        zzR = true
                    }
                    '\n' -> if (zzR) zzR = false else {
                        yyline++
                        yycolumn = 0
                    }
                    else -> {
                        zzR = false
                        yycolumn += zzCharCount
                    }
                }
                zzCurrentPosL += zzCharCount
            }
            if (zzR) {
                // peek one character ahead if it is
                // (if we have counted one line too much)
                var zzPeek: Boolean
                if (zzMarkedPosL < zzEndReadL) zzPeek = zzBufferL[zzMarkedPosL] == '\n' else if (zzAtEOF) zzPeek =
                    false else {
                    val eof = zzRefill()
                    zzEndReadL = zzEndRead
                    zzMarkedPosL = zzMarkedPos
                    zzBufferL = zzBuffer
                    zzPeek = if (eof) false else zzBufferL[zzMarkedPosL] == '\n'
                }
                if (zzPeek) yyline--
            }
            zzAction = -1
            zzStartRead = zzMarkedPosL
            zzCurrentPos = zzStartRead
            zzCurrentPosL = zzCurrentPos
            zzState = ZZ_LEXSTATE[zzLexicalState]

            // set up zzAction for empty match case:
            var zzAttributes = zzAttrL[zzState]
            if (zzAttributes and 1 == 1) {
                zzAction = zzState
            }
            zzForAction@ while (true) {
                if (zzCurrentPosL < zzEndReadL) {
                    zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL)
                    zzCurrentPosL += Character.charCount(zzInput)
                } else if (zzAtEOF) {
                    zzInput = YYEOF
                    break@zzForAction
                } else {
                    // store back cached positions
                    zzCurrentPos = zzCurrentPosL
                    zzMarkedPos = zzMarkedPosL
                    val eof = zzRefill()
                    // get translated positions and possibly new buffer
                    zzCurrentPosL = zzCurrentPos
                    zzMarkedPosL = zzMarkedPos
                    zzBufferL = zzBuffer
                    zzEndReadL = zzEndRead
                    if (eof) {
                        zzInput = YYEOF
                        break@zzForAction
                    } else {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL)
                        zzCurrentPosL += Character.charCount(zzInput)
                    }
                }
                val zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)]
                if (zzNext == -1) break@zzForAction
                zzState = zzNext
                zzAttributes = zzAttrL[zzState]
                if (zzAttributes and 1 == 1) {
                    zzAction = zzState
                    zzMarkedPosL = zzCurrentPosL
                    if (zzAttributes and 8 == 8) break@zzForAction
                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL
            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true
                return null
            } else {
                when (if (zzAction < 0) zzAction else ZZ_ACTION[zzAction]) {
                    1 -> {
                        throw BananaRuntimeError("Illegal token \"\${yytext()}\" detected.")
                    }
                    3 -> {}
                    2 -> {}
                    4 -> {}
                    else -> zzScanError(ZZ_NO_MATCH)
                }
            }
        }
    }

    companion object {
        /** This character denotes the end of file.  */
        private const val YYEOF = -1

        /** Initial size of the lookahead buffer.  */
        private const val ZZ_BUFFERSIZE = 16384

        // Lexical states.
        private const val YYINITIAL = 0
        private const val NO_ASCII = 2

        /**
         * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
         * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
         * at the beginning of a line
         * l is of the form l = 2*k, k a non negative integer
         */
        private val ZZ_LEXSTATE = intArrayOf(
            0, 0, 1, 1
        )

        /**
         * Top-level table for translating characters to character classes
         */
        private val ZZ_CMAP_TOP = zzUnpackcmap_top()
        private const val ZZ_CMAP_TOP_PACKED_0 =
            "\u0001\u0000\u001f\u0100\u0001\u0200\u00b7\u0100\u0008\u0300\u1020\u0100"

        private fun zzUnpackcmap_top(): IntArray {
            val result = IntArray(4352)
            val offset = 0
            zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result)
            return result
        }

        private fun zzUnpackcmap_top(packed: String, offset: Int, result: IntArray): Int {
            var i = 0 /* index in packed string  */
            var j = offset /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                var count = packed[i++].code
                val value = packed[i++].code
                do result[j++] = value while (--count > 0)
            }
            return j
        }

        /**
         * Second-level tables for translating characters to character classes
         */
        private val ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks()
        private const val ZZ_CMAP_BLOCKS_PACKED_0 =
            "\u0009\u0000\u0001\u0001\u0001\u0002\u0002\u0000\u0001\u0002\u0013\u0000\u005e\u0001\u0021\u0000" +
                "\u0188\u0001\u0002\u0002\u00d6\u0001\u0100\u0002"

        private fun zzUnpackcmap_blocks(): IntArray {
            val result = IntArray(1024)
            val offset = 0
            zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result)
            return result
        }

        private fun zzUnpackcmap_blocks(packed: String, offset: Int, result: IntArray): Int {
            var i = 0 /* index in packed string  */
            var j = offset /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                var count = packed[i++].code
                val value = packed[i++].code
                do result[j++] = value while (--count > 0)
            }
            return j
        }

        /**
         * Translates DFA states to action switch labels.
         */
        private val ZZ_ACTION = zzUnpackAction()
        private const val ZZ_ACTION_PACKED_0 = "\u0002\u0000\u0001\u0001\u0001\u0002"
        private fun zzUnpackAction(): IntArray {
            val result = IntArray(4)
            val offset = 0
            zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result)
            return result
        }

        private fun zzUnpackAction(packed: String, offset: Int, result: IntArray): Int {
            var i = 0 /* index in packed string  */
            var j = offset /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                var count = packed[i++].code
                val value = packed[i++].code
                do result[j++] = value while (--count > 0)
            }
            return j
        }

        /**
         * Translates a state to a row index in the transition table
         */
        private val ZZ_ROWMAP = zzUnpackRowMap()
        private const val ZZ_ROWMAP_PACKED_0 = "\u0000\u0000\u0000\u0003\u0000\u0003\u0000\u0003"
        private fun zzUnpackRowMap(): IntArray {
            val result = IntArray(4)
            val offset = 0
            zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result)
            return result
        }

        private fun zzUnpackRowMap(packed: String, offset: Int, result: IntArray): Int {
            var i = 0 /* index in packed string  */
            var j = offset /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                val high = packed[i++].code shl 16
                result[j++] = high or packed[i++].code
            }
            return j
        }

        /**
         * The transition table of the DFA
         */
        private val ZZ_TRANS = zzUnpackTrans()
        private const val ZZ_TRANS_PACKED_0 = "\u0001\u0003\u0001\u0004\u0004\u0000"
        private fun zzUnpackTrans(): IntArray {
            val result = IntArray(6)
            val offset = 0
            zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result)
            return result
        }

        private fun zzUnpackTrans(packed: String, offset: Int, result: IntArray): Int {
            var i = 0 /* index in packed string  */
            var j = offset /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                var count = packed[i++].code
                var value = packed[i++].code
                value--
                do result[j++] = value while (--count > 0)
            }
            return j
        }

        /** Error code for "Unknown internal scanner error".  */
        private const val ZZ_UNKNOWN_ERROR = 0

        /** Error code for "could not match input".  */
        private const val ZZ_NO_MATCH = 1

        /** Error code for "pushback value was too large".  */
        private const val ZZ_PUSHBACK_2BIG = 2

        /**
         * Error messages for [.ZZ_UNKNOWN_ERROR], [.ZZ_NO_MATCH], and
         * [.ZZ_PUSHBACK_2BIG] respectively.
         */
        private val ZZ_ERROR_MSG = arrayOf(
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
        )

        /**
         * ZZ_ATTRIBUTE[aState] contains the attributes of state `aState`
         */
        private val ZZ_ATTRIBUTE = zzUnpackAttribute()
        private const val ZZ_ATTRIBUTE_PACKED_0 = "\u0001\u0000\u0001\u0008\u0002\u0009"
        private fun zzUnpackAttribute(): IntArray {
            val result = IntArray(4)
            val offset = 0
            zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result)
            return result
        }

        private fun zzUnpackAttribute(packed: String, offset: Int, result: IntArray): Int {
            var i = 0 /* index in packed string  */
            var j = offset /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                var count = packed[i++].code
                val value = packed[i++].code
                do result[j++] = value while (--count > 0)
            }
            return j
        }

        /**
         * Translates raw input code points to DFA table row
         */
        private fun zzCMap(input: Int): Int {
            val offset = input and 255
            return if (offset == input) ZZ_CMAP_BLOCKS[offset] else ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input shr 8] or offset]
        }

        /**
         * Reports an error that occurred while scanning.
         *
         *
         * In a well-formed scanner (no or only correct usage of `yypushback(int)` and a
         * match-all fallback rule) this method will only be called with things that
         * "Can't Possibly Happen".
         *
         *
         * If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
         * scanner etc.).
         *
         *
         * Usual syntax/scanner level error handling should be done in error fallback rules.
         *
         * @param errorCode the code of the error message to display.
         */
        private fun zzScanError(errorCode: Int) {
            val message = try {
                ZZ_ERROR_MSG[errorCode]
            } catch (e: Exception) {
                ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR]
            }
            throw Error(message)
        }
    }
}
