// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
package tech.antibytes.banana.tokenizer

import tech.antibytes.banana.BananaRuntimeError
import tech.antibytes.banana.PublicApi
import tech.antibytes.banana.tokenizer.TokenizerError.UnknownState

// See https://github.com/jflex-de/jflex/issues/222
internal abstract class BananaFlexTokenizer(
    private var zzReader: TokenizerContract.Reader,
) {
    /** Current state of the DFA.  */
    private var zzState = 0

    /** Current lexical state.  */
    private var zzLexicalState = YYINITIAL

    /**
     * This buffer contains the current text to be matched and is the source of the [.yytext]
     * string.
     */
    private var zzBuffer = CharArray(ZZ_BUFFERSIZE)

    /** Text position at the last accepting state.  */
    private var zzMarkedPos = 0

    /** Current text position in the buffer.  */
    private var zzCurrentPos = 0

    /** Marks the beginning of the [.yytext] string in the buffer.  */
    private var zzStartRead = 0

    /** Marks the last character in the buffer, that has been read from input.  */
    private var zzEndRead = 0

    /**
     * Whether the scanner is at the end of file.
     * @see .yyatEOF
     */
    private var zzAtEOF = false

    /**
     * The number of occupied positions in [.zzBuffer] beyond [.zzEndRead].
     *
     *
     * When a lead/high surrogate has been read from the input stream into the final
     * [.zzBuffer] position, this will have a value of 1; otherwise, it will have a value of 0.
     */
    private var zzFinalHighSurrogate = 0

    /** Number of newlines encountered up to the start of the matched text.  */
    private var yyline = 0

    /** Number of characters from the last newline up to the start of the matched text.  */
    private var yycolumn = 0

    /** Number of characters up to the start of the matched text.  */
    private var yychar: Long = 0

    /** Whether the scanner is currently at the beginning of a line.  */
    private var zzAtBOL = true

    /** Whether the user-EOF-code has already been executed.  */
    private var zzEOFDone = false

    /* user code: */
    private var offset = 0
    private fun createToken(tokenType: PublicApi.TokenTypes): PublicApi.Token {
        return PublicApi.Token(
            tokenType,
            yytext(),
            yycolumn,
            yyline,
        ).also { offset += yylength() }
    }

    private fun createCleanedToken(tokenType: PublicApi.TokenTypes): PublicApi.Token {
        return PublicApi.Token(
            tokenType,
            yytext().drop(1),
            yycolumn,
            yyline,
        ).also { offset += yylength() }
    }

    private fun rightMostBraceToken(tokenType: PublicApi.TokenTypes): PublicApi.Token {
        val tokenValue = yytext()
        return if (tokenValue.length > 2) {
            yypushback(tokenValue.length - 1)
            offset += 1
            createToken(PublicApi.TokenTypes.LITERAL)
        } else {
            PublicApi.Token(
                tokenType,
                yytext(),
                yycolumn,
                yyline,
            ).also { offset += 2 }
        }
    }

    /**
     * Refills the input buffer.
     *
     * @return `false` iff there was new input.
     * @exception BananaRuntimeError  if any I/O-Error occurs
     */
    @Throws(BananaRuntimeError::class)
    private fun zzRefill(): Boolean {
        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate
            zzFinalHighSurrogate = 0
            zzBuffer.copyInto(
                destination = zzBuffer,
                destinationOffset = 0,
                startIndex = zzStartRead,
                endIndex = zzEndRead,
            )

            /* translate stored positions */zzEndRead -= zzStartRead
            zzCurrentPos -= zzStartRead
            zzMarkedPos -= zzStartRead
            zzStartRead = 0
        }

        /* is the buffer big enough? */if (zzCurrentPos >= zzBuffer.size - zzFinalHighSurrogate) {
            /* if not: blow it up */
            val newBuffer = CharArray(zzBuffer.size * 2)
            zzBuffer.copyInto(destination = newBuffer)
            zzBuffer = newBuffer
            zzEndRead += zzFinalHighSurrogate
            zzFinalHighSurrogate = 0
        }

        /* fill the buffer with new input */
        val requested = zzBuffer.size - zzEndRead
        val numRead = zzReader.read(zzBuffer, zzEndRead, requested)

        /* not supposed to occur according to specification of TokenizerContract.Reader */if (numRead == 0) {
            throw BananaRuntimeError(
                "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.",
            )
        }
        if (numRead > 0) {
            zzEndRead += numRead
            if (zzBuffer[zzEndRead - 1].isHighSurrogate()) {
                if (numRead == requested) { // We requested too few chars to encode a full Unicode character
                    --zzEndRead
                    zzFinalHighSurrogate = 1
                } else { // There is room in the buffer for at least one more char
                    val c = zzReader.read() // Expecting to read a paired low surrogate char
                    if (c == -1) {
                        return true
                    } else {
                        zzBuffer[zzEndRead++] = c.toChar()
                    }
                }
            }
            /* potentially more input available */return false
        }

        /* numRead < 0 ==> end of stream */return true
    }

    /**
     * Closes the input reader.
     *
     * @throws BananaRuntimeError if the reader could not be closed.
     */
    @Throws(BananaRuntimeError::class)
    protected fun yyclose() {
        zzAtEOF = true // indicate end of file
        zzEndRead = zzStartRead // invalidate buffer
        zzReader.close()
    }

    /**
     * Resets the scanner to read from a new input stream.
     *
     *
     * Does not close the old reader.
     *
     *
     * All internal variables are reset, the old input stream **cannot** be reused (internal
     * buffer is discarded and lost). Lexical state is set to `ZZ_INITIAL`.
     *
     *
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader The new input stream.
     */
    protected fun yyreset(reader: TokenizerContract.Reader) {
        zzReader = reader
        zzEOFDone = false
        yyResetPosition()
        zzLexicalState = YYINITIAL
        if (zzBuffer.size < ZZ_BUFFERSIZE) {
            zzBuffer = CharArray(ZZ_BUFFERSIZE)
        }
    }

    /**
     * Resets the input position.
     */
    private fun yyResetPosition() {
        zzAtBOL = true
        zzAtEOF = false
        zzCurrentPos = 0
        zzMarkedPos = 0
        zzStartRead = 0
        zzEndRead = 0
        zzFinalHighSurrogate = 0
        yyline = 0
        yycolumn = 0
        yychar = 0L
    }

    /**
     * Returns whether the scanner has reached the end of the reader it reads from.
     *
     * @return whether the scanner has reached EOF.
     */
    protected fun yyatEOF(): Boolean {
        return zzAtEOF
    }

    /**
     * Returns the current lexical state.
     *
     * @return the current lexical state.
     */
    protected fun yystate(): Int {
        return zzLexicalState
    }

    /**
     * Enters a new lexical state.
     *
     * @param newState the new lexical state
     */
    protected fun yybegin(newState: Int) {
        zzLexicalState = newState
    }

    /**
     * Returns the text matched by the current regular expression.
     *
     * @return the matched text.
     */
    protected fun yytext(): String {
        return zzBuffer.concatToString(zzStartRead, zzMarkedPos)
    }

    /**
     * Returns the character at the given position from the matched text.
     *
     *
     * It is equivalent to `yytext().charAt(pos)`, but faster.
     *
     * @param position the position of the character to fetch. A value from 0 to `yylength()-1`.
     *
     * @return the character at `position`.
     */
    protected fun yycharat(position: Int): Char {
        return zzBuffer[zzStartRead + position]
    }

    /**
     * How many characters were matched.
     *
     * @return the length of the matched text region.
     */
    protected fun yylength(): Int {
        return zzMarkedPos - zzStartRead
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     *
     * They will be read again by then next call of the scanning method.
     *
     * @param number the number of characters to be read again. This number must not be greater than
     * [.yylength].
     */
    protected fun yypushback(number: Int) {
        if (number > yylength()) zzScanError(ZZ_PUSHBACK_2BIG)
        zzMarkedPos -= number
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of input is encountered
     * or an I/O-Error occurs.
     *
     * @return the next token.
     * @exception BananaRuntimeError if any I/O-Error occurs.
     */
    @Throws(BananaRuntimeError::class)
    protected fun yylex(): PublicApi.Token? {
        var zzInput: Int
        var zzAction: Int

        // cached fields:
        var zzCurrentPosL: Int
        var zzMarkedPosL: Int
        var zzEndReadL = zzEndRead
        var zzBufferL = zzBuffer
        val zzTransL = ZZ_TRANS
        val zzRowMapL = ZZ_ROWMAP
        val zzAttrL = ZZ_ATTRIBUTE
        while (true) {
            zzMarkedPosL = zzMarkedPos
            var zzR = false
            var zzCh: Int
            var zzCharCount: Int
            zzCurrentPosL = zzStartRead
            while (zzCurrentPosL < zzMarkedPosL) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL)
                zzCharCount = Character.charCount(zzCh)
                when (zzCh.toChar()) {
                    '\u000B', '\u000C', '\u0085', '\u2028', '\u2029' -> {
                        yyline++
                        yycolumn = 0
                        zzR = false
                    }
                    '\r' -> {
                        yyline++
                        yycolumn = 0
                        zzR = true
                    }
                    '\n' -> if (zzR) {
                        zzR = false
                    } else {
                        yyline++
                        yycolumn = 0
                    }
                    else -> {
                        zzR = false
                        yycolumn += zzCharCount
                    }
                }
                zzCurrentPosL += zzCharCount
            }
            if (zzR) {
                // peek one character ahead if it is
                // (if we have counted one line too much)
                var zzPeek: Boolean
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n'
                } else if (zzAtEOF) {
                    zzPeek =
                        false
                } else {
                    val eof = zzRefill()
                    zzEndReadL = zzEndRead
                    zzMarkedPosL = zzMarkedPos
                    zzBufferL = zzBuffer
                    zzPeek = if (eof) false else zzBufferL[zzMarkedPosL] == '\n'
                }
                if (zzPeek) yyline--
            }
            zzAction = -1
            zzStartRead = zzMarkedPosL
            zzCurrentPos = zzStartRead
            zzCurrentPosL = zzCurrentPos
            zzState = ZZ_LEXSTATE[zzLexicalState]

            // set up zzAction for empty match case:
            var zzAttributes = zzAttrL[zzState]
            if (zzAttributes and 1 == 1) {
                zzAction = zzState
            }
            zzForAction@ while (true) {
                if (zzCurrentPosL < zzEndReadL) {
                    zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL)
                    zzCurrentPosL += Character.charCount(zzInput)
                } else if (zzAtEOF) {
                    zzInput = YYEOF
                    break@zzForAction
                } else {
                    // store back cached positions
                    zzCurrentPos = zzCurrentPosL
                    zzMarkedPos = zzMarkedPosL
                    val eof = zzRefill()
                    // get translated positions and possibly new buffer
                    zzCurrentPosL = zzCurrentPos
                    zzMarkedPosL = zzMarkedPos
                    zzBufferL = zzBuffer
                    zzEndReadL = zzEndRead
                    if (eof) {
                        zzInput = YYEOF
                        break@zzForAction
                    } else {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL)
                        zzCurrentPosL += Character.charCount(zzInput)
                    }
                }
                val zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)]
                if (zzNext == -1) break@zzForAction
                zzState = zzNext
                zzAttributes = zzAttrL[zzState]
                if (zzAttributes and 1 == 1) {
                    zzAction = zzState
                    zzMarkedPosL = zzCurrentPosL
                    if (zzAttributes and 8 == 8) break@zzForAction
                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL
            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true
                return null
            } else {
                when (if (zzAction < 0) zzAction else ZZ_ACTION[zzAction]) {
                    1 -> {
                        throw TokenizerError.IllegalCharacter("Illegal token \"" + yytext() + "\" detected.")
                    }
                    16 -> {}
                    2 -> {
                        return createToken(PublicApi.TokenTypes.WHITESPACE)
                    }
                    17 -> {}
                    3 -> {
                        return createToken(PublicApi.TokenTypes.LITERAL)
                    }
                    18 -> {}
                    4 -> {
                        return createToken(PublicApi.TokenTypes.INTEGER)
                    }
                    19 -> {}
                    5 -> {
                        return createToken(PublicApi.TokenTypes.ASCII_STRING)
                    }
                    20 -> {}
                    6 -> {
                        return createToken(PublicApi.TokenTypes.DELIMITER)
                    }
                    21 -> {}
                    7 -> {
                        return createToken(PublicApi.TokenTypes.NON_ASCII_STRING)
                    }
                    22 -> {}
                    8 -> {
                        return createCleanedToken(PublicApi.TokenTypes.VARIABLE)
                    }
                    23 -> {}
                    9 -> {
                        return createToken(PublicApi.TokenTypes.DOUBLE)
                    }
                    24 -> {}
                    10 -> {
                        return rightMostBraceToken(PublicApi.TokenTypes.LINK_START)
                    }
                    25 -> {}
                    11 -> {
                        return createCleanedToken(PublicApi.TokenTypes.ESCAPED)
                    }
                    26 -> {}
                    12 -> {
                        return createToken(PublicApi.TokenTypes.LINK_END)
                    }
                    27 -> {}
                    13 -> {
                        return rightMostBraceToken(PublicApi.TokenTypes.FUNCTION_START)
                    }
                    28 -> {}
                    14 -> {
                        return createToken(PublicApi.TokenTypes.FUNCTION_END)
                    }
                    29 -> {}
                    15 -> {
                        return createToken(PublicApi.TokenTypes.URL)
                    }
                    30 -> {}
                    else -> zzScanError(ZZ_NO_MATCH)
                }
            }
        }
    }

    companion object {
        /** This character denotes the end of file.  */
        const val YYEOF = -1

        /** Initial size of the lookahead buffer.  */
        private const val ZZ_BUFFERSIZE = 16384

        // Lexical states.
        const val YYINITIAL = 0

        /**
         * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
         * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
         * at the beginning of a line
         * l is of the form l = 2*k, k a non negative integer
         */
        private val ZZ_LEXSTATE = intArrayOf(
            0,
            0,
        )

        /**
         * Top-level table for translating characters to character classes
         */
        private val ZZ_CMAP_TOP = zzUnpackcmap_top()
        private const val ZZ_CMAP_TOP_PACKED_0 =
            "\u0001\u0000\u0001\u0100\u0001\u0200\u0001\u0300\u0001\u0400\u0001\u0500\u0001\u0600\u0001\u0700" +
                "\u0001\u0800\u0001\u0900\u0001\u0a00\u0001\u0b00\u0001\u0c00\u0001\u0d00\u0001\u0e00\u0001\u0f00" +
                "\u0001\u1000\u0001\u0100\u0001\u1100\u0001\u1200\u0001\u1300\u0001\u0100\u0001\u1400\u0001\u1500" +
                "\u0001\u1600\u0001\u1700\u0001\u1800\u0001\u1900\u0001\u1a00\u0001\u1b00\u0001\u0100\u0001\u1c00" +
                "\u0001\u1d00\u0001\u1e00\u0002\u1f00\u0001\u2000\u0002\u1f00\u0001\u2100\u0004\u1f00\u0001\u2200" +
                "\u0001\u2300\u0001\u2400\u0001\u1f00\u0001\u2500\u0001\u2600\u0001\u2700\u0001\u1f00\u0019\u0100" +
                "\u0001\u2800\u0051\u0100\u0001\u2900\u0004\u0100\u0001\u2a00\u0001\u0100\u0001\u2b00\u0001\u2c00" +
                "\u0001\u2d00\u0001\u2e00\u0001\u2f00\u0001\u3000\u002b\u0100\u0001\u3100\u0008\u3200\u0019\u1f00" +
                "\u0001\u0100\u0001\u3300\u0001\u3400\u0001\u0100\u0001\u3500\u0001\u3600\u0001\u3700\u0001\u3800" +
                "\u0001\u3900\u0001\u3a00\u0001\u3b00\u0001\u3c00\u0001\u3d00\u0001\u0100\u0001\u3e00\u0001\u3f00" +
                "\u0001\u4000\u0001\u4100\u0001\u4200\u0001\u4300\u0001\u4400\u0001\u4500\u0001\u4600\u0001\u4700" +
                "\u0001\u4800\u0001\u4900\u0001\u4a00\u0001\u4b00\u0001\u4c00\u0001\u4d00\u0001\u4e00\u0001\u4f00" +
                "\u0001\u5000\u0001\u5100\u0001\u1f00\u0001\u5200\u0001\u5300\u0001\u5400\u0001\u5500\u0003\u0100" +
                "\u0001\u5600\u0001\u5700\u0001\u5800\u000a\u1f00\u0004\u0100\u0001\u5900\u000f\u1f00\u0002\u0100" +
                "\u0001\u5a00\u0021\u1f00\u0002\u0100\u0001\u5b00\u0001\u5c00\u0002\u1f00\u0001\u5d00\u0001\u5e00" +
                "\u0017\u0100\u0001\u5f00\u0002\u0100\u0001\u6000\u0025\u1f00\u0001\u0100\u0001\u6100\u0001\u6200" +
                "\u0009\u1f00\u0001\u6300\u0015\u1f00\u0001\u6400\u0001\u6500\u0001\u6600\u0001\u6700\u0001\u6800" +
                "\u0001\u6900\u0009\u1f00\u0001\u6a00\u0001\u6b00\u0005\u1f00\u0001\u6c00\u0001\u6d00\u0002\u1f00" +
                "\u0001\u6e00\u0001\u6f00\u0001\u7000\u0002\u1f00\u0001\u7100\u000e\u1f00\u00a6\u0100\u0001\u7200" +
                "\u0010\u0100\u0001\u7300\u0001\u7400\u0015\u0100\u0001\u7500\u001c\u0100\u0001\u7600\u000c\u1f00" +
                "\u0002\u0100\u0001\u7700\u0e05\u1f00"

        private fun zzUnpackcmap_top(): IntArray {
            val result = IntArray(4352)
            val offset = 0
            zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result)
            return result
        }

        private fun zzUnpackcmap_top(packed: String, offset: Int, result: IntArray): Int {
            var i = 0 /* index in packed string  */
            var j = offset /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                var count = packed[i++].code
                val value = packed[i++].code
                do result[j++] = value while (--count > 0)
            }
            return j
        }

        /**
         * Second-level tables for translating characters to character classes
         */
        private val ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks()
        private const val ZZ_CMAP_BLOCKS_PACKED_0 =
            "\u0009\u0000\u0005\u0001\u0012\u0000\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0003\u0001\u0005" +
                "\u0006\u0003\u0001\u0006\u0001\u0003\u0001\u0006\u0001\u0007\u0001\u0008\u000a\u0009\u0001\u000a" +
                "\u0001\u0003\u0001\u0004\u0001\u0003\u0001\u0004\u0002\u0003\u0004\u000b\u0001\u000c\u0015\u000b" +
                "\u0001\u000d\u0001\u000e\u0001\u000f\u0001\u0004\u0001\u0010\u0001\u0004\u0004\u000b\u0001\u000c" +
                "\u0015\u000b\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0003\u0006\u0000\u0001\u0001\u001a\u0000" +
                "\u0001\u0001\u0009\u0014\u0001\u0015\u0007\u0014\u0002\u0009\u0001\u0014\u0001\u0015\u0003\u0014" +
                "\u0001\u0009\u0001\u0015\u0001\u0014\u0003\u0009\u0001\u0014\u0017\u0015\u0001\u0014\u001f\u0015" +
                "\u0001\u0014\u01ca\u0015\u0004\u0014\u000c\u0015\u000e\u0014\u0005\u0015\u0007\u0014\u0001\u0015" +
                "\u0001\u0014\u0001\u0015\u0081\u0014\u0005\u0015\u0001\u0014\u0002\u0015\u0002\u0014\u0004\u0015" +
                "\u0001\u0014\u0001\u0015\u0006\u0014\u0001\u0015\u0001\u0014\u0003\u0015\u0001\u0014\u0001\u0015" +
                "\u0001\u0014\u0014\u0015\u0001\u0014\u0053\u0015\u0001\u0014\u008b\u0015\u0008\u0014\u00a6\u0015" +
                "\u0001\u0014\u0026\u0015\u0002\u0014\u0001\u0015\u0006\u0014\u0029\u0015\u0047\u0014\u001b\u0015" +
                "\u0004\u0014\u0004\u0015\u002d\u0014\u002b\u0015\u0015\u0014\u000a\u0009\u0004\u0014\u0002\u0015" +
                "\u0001\u0014\u0063\u0015\u0001\u0014\u0001\u0015\u000f\u0014\u0002\u0015\u0007\u0014\u0002\u0015" +
                "\u000a\u0009\u0003\u0015\u0002\u0014\u0001\u0015\u0010\u0014\u0001\u0015\u0001\u0014\u001e\u0015" +
                "\u001d\u0014\u0059\u0015\u000b\u0014\u0001\u0015\u000e\u0014\u000a\u0009\u0021\u0015\u0009\u0014" +
                "\u0002\u0015\u0004\u0014\u0001\u0015\u0005\u0014\u0016\u0015\u0004\u0014\u0001\u0015\u0009\u0014" +
                "\u0001\u0015\u0003\u0014\u0001\u0015\u0017\u0014\u0019\u0015\u0007\u0014\u000b\u0015\u0035\u0014" +
                "\u0015\u0015\u0001\u0014\u0008\u0015\u0046\u0014\u0036\u0015\u0003\u0014\u0001\u0015\u0012\u0014" +
                "\u0001\u0015\u0007\u0014\u000a\u0015\u0004\u0014\u000a\u0009\u0001\u0014\u0010\u0015\u0004\u0014" +
                "\u0008\u0015\u0002\u0014\u0002\u0015\u0002\u0014\u0016\u0015\u0001\u0014\u0007\u0015\u0001\u0014" +
                "\u0001\u0015\u0003\u0014\u0004\u0015\u0003\u0014\u0001\u0015\u0010\u0014\u0001\u0015\u000d\u0014" +
                "\u0002\u0015\u0001\u0014\u0003\u0015\u0004\u0014\u000a\u0009\u0002\u0015\u0002\u0014\u0006\u0009" +
                "\u0002\u0014\u0001\u0015\u0008\u0014\u0006\u0015\u0004\u0014\u0002\u0015\u0002\u0014\u0016\u0015" +
                "\u0001\u0014\u0007\u0015\u0001\u0014\u0002\u0015\u0001\u0014\u0002\u0015\u0001\u0014\u0002\u0015" +
                "\u001f\u0014\u0004\u0015\u0001\u0014\u0001\u0015\u0007\u0014\u000a\u0009\u0002\u0014\u0003\u0015" +
                "\u0010\u0014\u0009\u0015\u0001\u0014\u0003\u0015\u0001\u0014\u0016\u0015\u0001\u0014\u0007\u0015" +
                "\u0001\u0014\u0002\u0015\u0001\u0014\u0005\u0015\u0003\u0014\u0001\u0015\u0012\u0014\u0001\u0015" +
                "\u000f\u0014\u0002\u0015\u0004\u0014\u000a\u0009\u0009\u0014\u0001\u0015\u000b\u0014\u0008\u0015" +
                "\u0002\u0014\u0002\u0015\u0002\u0014\u0016\u0015\u0001\u0014\u0007\u0015\u0001\u0014\u0002\u0015" +
                "\u0001\u0014\u0005\u0015\u0003\u0014\u0001\u0015\u001e\u0014\u0002\u0015\u0001\u0014\u0003\u0015" +
                "\u0004\u0014\u000a\u0009\u0001\u0014\u0001\u0015\u0006\u0009\u000b\u0014\u0001\u0015\u0001\u0014" +
                "\u0006\u0015\u0003\u0014\u0003\u0015\u0001\u0014\u0004\u0015\u0003\u0014\u0002\u0015\u0001\u0014" +
                "\u0001\u0015\u0001\u0014\u0002\u0015\u0003\u0014\u0002\u0015\u0003\u0014\u0003\u0015\u0003\u0014" +
                "\u000c\u0015\u0016\u0014\u0001\u0015\u0015\u0014\u000d\u0009\u0012\u0014\u0008\u0015\u0001\u0014" +
                "\u0003\u0015\u0001\u0014\u0017\u0015\u0001\u0014\u0010\u0015\u0003\u0014\u0001\u0015\u001a\u0014" +
                "\u0003\u0015\u0005\u0014\u0002\u0015\u0004\u0014\u000a\u0009\u0008\u0014\u0007\u0009\u0001\u0014" +
                "\u0001\u0015\u0004\u0014\u0008\u0015\u0001\u0014\u0003\u0015\u0001\u0014\u0017\u0015\u0001\u0014" +
                "\u000a\u0015\u0001\u0014\u0005\u0015\u0003\u0014\u0001\u0015\u0020\u0014\u0001\u0015\u0001\u0014" +
                "\u0002\u0015\u0004\u0014\u000a\u0009\u0001\u0014\u0002\u0015\u0012\u0014\u0008\u0015\u0001\u0014" +
                "\u0003\u0015\u0001\u0014\u0029\u0015\u0002\u0014\u0001\u0015\u0010\u0014\u0001\u0015\u0005\u0014" +
                "\u0003\u0015\u0001\u0014\u0007\u0009\u0003\u0015\u0004\u0014\u0013\u0009\u0001\u0014\u0006\u0015" +
                "\u0005\u0014\u0012\u0015\u0003\u0014\u0018\u0015\u0001\u0014\u0009\u0015\u0001\u0014\u0001\u0015" +
                "\u0002\u0014\u0007\u0015\u001f\u0014\u000a\u0009\u0011\u0014\u0030\u0015\u0001\u0014\u0002\u0015" +
                "\u000c\u0014\u0007\u0015\u0009\u0014\u000a\u0009\u0027\u0014\u0002\u0015\u0001\u0014\u0001\u0015" +
                "\u0001\u0014\u0005\u0015\u0001\u0014\u0018\u0015\u0001\u0014\u0001\u0015\u0001\u0014\u000a\u0015" +
                "\u0001\u0014\u0002\u0015\u0009\u0014\u0001\u0015\u0002\u0014\u0005\u0015\u0001\u0014\u0001\u0015" +
                "\u0009\u0014\u000a\u0009\u0002\u0014\u0004\u0015\u0020\u0014\u0001\u0015\u001f\u0014\u0014\u0009" +
                "\u000c\u0014\u0008\u0015\u0001\u0014\u0024\u0015\u001b\u0014\u0005\u0015\u0073\u0014\u002b\u0015" +
                "\u0014\u0014\u0001\u0015\u000a\u0009\u0006\u0014\u0006\u0015\u0004\u0014\u0004\u0015\u0003\u0014" +
                "\u0001\u0015\u0003\u0014\u0002\u0015\u0007\u0014\u0003\u0015\u0004\u0014\u000d\u0015\u000c\u0014" +
                "\u0001\u0015\u0001\u0014\u000a\u0009\u0006\u0014\u0026\u0015\u0001\u0014\u0001\u0015\u0005\u0014" +
                "\u0001\u0015\u0002\u0014\u002b\u0015\u0001\u0014\u004d\u0015\u0001\u0014\u0004\u0015\u0002\u0014" +
                "\u0007\u0015\u0001\u0014\u0001\u0015\u0001\u0014\u0004\u0015\u0002\u0014\u0029\u0015\u0001\u0014" +
                "\u0004\u0015\u0002\u0014\u0021\u0015\u0001\u0014\u0004\u0015\u0002\u0014\u0007\u0015\u0001\u0014" +
                "\u0001\u0015\u0001\u0014\u0004\u0015\u0002\u0014\u000f\u0015\u0001\u0014\u0039\u0015\u0001\u0014" +
                "\u0004\u0015\u0002\u0014\u0043\u0015\u000e\u0014\u0014\u0009\u0003\u0014\u0010\u0015\u0010\u0014" +
                "\u0056\u0015\u0002\u0014\u0006\u0015\u0003\u0014\u016c\u0015\u0002\u0014\u0011\u0015\u0001\u0001" +
                "\u001a\u0015\u0005\u0014\u004b\u0015\u0003\u0014\u0003\u0009\u0008\u0015\u0007\u0014\u000d\u0015" +
                "\u0001\u0014\u0004\u0015\u000e\u0014\u0012\u0015\u000e\u0014\u0012\u0015\u000e\u0014\u000d\u0015" +
                "\u0001\u0014\u0003\u0015\u000f\u0014\u0034\u0015\u0023\u0014\u0001\u0015\u0004\u0014\u0001\u0015" +
                "\u0003\u0014\u000a\u0009\u0006\u0014\u000a\u0009\u0016\u0014\u000a\u0009\u0006\u0014\u0059\u0015" +
                "\u0007\u0014\u0005\u0015\u0002\u0014\u0022\u0015\u0001\u0014\u0001\u0015\u0005\u0014\u0046\u0015" +
                "\u000a\u0014\u001f\u0015\u0027\u0014\u000a\u0009\u001e\u0015\u0002\u0014\u0005\u0015\u000b\u0014" +
                "\u002c\u0015\u0004\u0014\u001a\u0015\u0006\u0014\u000b\u0009\u0025\u0014\u0017\u0015\u0009\u0014" +
                "\u0035\u0015\u002b\u0014\u000a\u0009\u0006\u0014\u000a\u0009\u000d\u0014\u0001\u0015\u005d\u0014" +
                "\u002f\u0015\u0011\u0014\u0007\u0015\u0004\u0014\u000a\u0009\u0029\u0014\u001e\u0015\u000d\u0014" +
                "\u0002\u0015\u000a\u0009\u002c\u0015\u001a\u0014\u0024\u0015\u001c\u0014\u000a\u0009\u0003\u0014" +
                "\u0003\u0015\u000a\u0009\u0024\u0015\u0002\u0014\u0009\u0015\u0007\u0014\u002b\u0015\u0002\u0014" +
                "\u0003\u0015\u0029\u0014\u0004\u0015\u0001\u0014\u0006\u0015\u0001\u0014\u0002\u0015\u0003\u0014" +
                "\u0001\u0015\u0005\u0014\u00c0\u0015\u0040\u0014\u0016\u0015\u0002\u0014\u0006\u0015\u0002\u0014" +
                "\u0026\u0015\u0002\u0014\u0006\u0015\u0002\u0014\u0008\u0015\u0001\u0014\u0001\u0015\u0001\u0014" +
                "\u0001\u0015\u0001\u0014\u0001\u0015\u0001\u0014\u001f\u0015\u0002\u0014\u0035\u0015\u0001\u0014" +
                "\u0007\u0015\u0001\u0014\u0001\u0015\u0003\u0014\u0003\u0015\u0001\u0014\u0007\u0015\u0003\u0014" +
                "\u0004\u0015\u0002\u0014\u0006\u0015\u0004\u0014\u000d\u0015\u0005\u0014\u0003\u0015\u0001\u0014" +
                "\u0007\u0015\u0003\u0014\u000b\u0001\u001d\u0014\u0002\u0001\u0005\u0014\u0001\u0001\u002f\u0014" +
                "\u0001\u0001\u0010\u0014\u0001\u0009\u0001\u0015\u0002\u0014\u0006\u0009\u0005\u0014\u0001\u0015" +
                "\u000a\u0009\u0006\u0014\u000d\u0015\u0065\u0014\u0001\u0015\u0004\u0014\u0001\u0015\u0002\u0014" +
                "\u000a\u0015\u0001\u0014\u0001\u0015\u0003\u0014\u0005\u0015\u0006\u0014\u0001\u0015\u0001\u0014" +
                "\u0001\u0015\u0001\u0014\u0001\u0015\u0001\u0014\u0004\u0015\u0001\u0014\u000b\u0015\u0002\u0014" +
                "\u0004\u0015\u0005\u0014\u0005\u0015\u0004\u0014\u0001\u0015\u0001\u0014\u0033\u0009\u0002\u0015" +
                "\u0005\u0009\u01d6\u0014\u003c\u0009\u004e\u0014\u0016\u0009\u0076\u0014\u001e\u0009\u006c\u0014" +
                "\u002f\u0015\u0001\u0014\u002f\u0015\u0001\u0014\u0085\u0015\u0006\u0014\u0004\u0015\u0003\u0014" +
                "\u0002\u0015\u0009\u0014\u0001\u0009\u0002\u0014\u0026\u0015\u0001\u0014\u0001\u0015\u0005\u0014" +
                "\u0001\u0015\u0002\u0014\u0038\u0015\u0007\u0014\u0001\u0015\u0010\u0014\u0017\u0015\u0009\u0014" +
                "\u0007\u0015\u0001\u0014\u0007\u0015\u0001\u0014\u0007\u0015\u0001\u0014\u0007\u0015\u0001\u0014" +
                "\u0007\u0015\u0001\u0014\u0007\u0015\u0001\u0014\u0007\u0015\u0001\u0014\u0007\u0015\u0050\u0014" +
                "\u0001\u0015\u00d0\u0014\u0001\u0001\u0004\u0014\u0002\u0015\u0001\u0009\u0019\u0014\u0009\u0009" +
                "\u0007\u0014\u0005\u0015\u0002\u0014\u0003\u0009\u0002\u0015\u0004\u0014\u0056\u0015\u0006\u0014" +
                "\u0003\u0015\u0001\u0014\u005a\u0015\u0001\u0014\u0004\u0015\u0005\u0014\u002b\u0015\u0001\u0014" +
                "\u005e\u0015\u0003\u0014\u0004\u0009\u000a\u0014\u001b\u0015\u0035\u0014\u0010\u0015\u0020\u0014" +
                "\u000a\u0009\u001e\u0014\u0008\u0009\u0001\u0014\u000f\u0009\u0020\u0014\u000a\u0009\u0027\u0014" +
                "\u000f\u0009\u0040\u0014\u00b6\u0015\u004a\u0014\u00f0\u0015\u0010\u0014\u008d\u0015\u0043\u0014" +
                "\u002e\u0015\u0002\u0014\u000d\u0015\u0003\u0014\u0010\u0015\u000a\u0009\u0002\u0015\u0014\u0014" +
                "\u002f\u0015\u0010\u0014\u001f\u0015\u0002\u0014\u0046\u0015\u000a\u0009\u0027\u0014\u0009\u0015" +
                "\u0002\u0014\u0067\u0015\u0002\u0014\u0035\u0015\u0002\u0014\u0005\u0015\u0030\u0014\u000b\u0015" +
                "\u0001\u0014\u0003\u0015\u0001\u0014\u0004\u0015\u0001\u0014\u0017\u0015\u000d\u0014\u0006\u0009" +
                "\u000a\u0014\u0034\u0015\u000e\u0014\u0032\u0015\u001c\u0014\u000a\u0009\u0018\u0014\u0006\u0015" +
                "\u0003\u0014\u0001\u0015\u0001\u0014\u0002\u0015\u0001\u0014\u000a\u0009\u001c\u0015\u000a\u0014" +
                "\u0017\u0015\u0019\u0014\u001d\u0015\u0007\u0014\u002f\u0015\u001c\u0014\u0001\u0015\u000a\u0009" +
                "\u0006\u0014\u0005\u0015\u0001\u0014\u000a\u0015\u000a\u0009\u0005\u0015\u0001\u0014\u0029\u0015" +
                "\u0017\u0014\u0003\u0015\u0001\u0014\u0008\u0015\u0004\u0014\u000a\u0009\u0006\u0014\u0017\u0015" +
                "\u0003\u0014\u0001\u0015\u0003\u0014\u0032\u0015\u0001\u0014\u0001\u0015\u0003\u0014\u0002\u0015" +
                "\u0002\u0014\u0005\u0015\u0002\u0014\u0001\u0015\u0001\u0014\u0001\u0015\u0018\u0014\u0003\u0015" +
                "\u0002\u0014\u000b\u0015\u0007\u0014\u0003\u0015\u000c\u0014\u0006\u0015\u0002\u0014\u0006\u0015" +
                "\u0002\u0014\u0006\u0015\u0009\u0014\u0007\u0015\u0001\u0014\u0007\u0015\u0001\u0014\u002b\u0015" +
                "\u0001\u0014\u000c\u0015\u0008\u0014\u0073\u0015\u000d\u0014\u000a\u0009\u0006\u0014\u00a4\u0015" +
                "\u000c\u0014\u0017\u0015\u0004\u0014\u0031\u0015\u0004\u0014\u0100\u0016\u006e\u0015\u0002\u0014" +
                "\u006a\u0015\u0026\u0014\u0007\u0015\u000c\u0014\u0005\u0015\u0005\u0014\u0001\u0015\u0001\u0014" +
                "\u000a\u0015\u0001\u0014\u000d\u0015\u0001\u0014\u0005\u0015\u0001\u0014\u0001\u0015\u0001\u0014" +
                "\u0002\u0015\u0001\u0014\u0002\u0015\u0001\u0014\u006c\u0015\u0021\u0014\u006b\u0015\u0012\u0014" +
                "\u0040\u0015\u0002\u0014\u0036\u0015\u0028\u0014\u000c\u0015\u0074\u0014\u0005\u0015\u0001\u0014" +
                "\u0087\u0015\u0013\u0014\u000a\u0009\u0007\u0014\u001a\u0015\u0006\u0014\u001a\u0015\u000b\u0014" +
                "\u0059\u0015\u0003\u0014\u0006\u0015\u0002\u0014\u0006\u0015\u0002\u0014\u0006\u0015\u0002\u0014" +
                "\u0003\u0015\u0023\u0014\u000c\u0015\u0001\u0014\u001a\u0015\u0001\u0014\u0013\u0015\u0001\u0014" +
                "\u0002\u0015\u0001\u0014\u000f\u0015\u0002\u0014\u000e\u0015\u0022\u0014\u007b\u0015\u000c\u0014" +
                "\u002d\u0009\u000c\u0014\u0039\u0009\u0011\u0014\u0002\u0009\u00f4\u0014\u001d\u0015\u0003\u0014" +
                "\u0031\u0015\u0010\u0014\u001b\u0009\u0004\u0014\u0020\u0015\u0004\u0009\u0009\u0014\u0014\u0015" +
                "\u0001\u0009\u0008\u0015\u0001\u0009\u0005\u0014\u0026\u0015\u000a\u0014\u001e\u0015\u0002\u0014" +
                "\u0024\u0015\u0004\u0014\u0008\u0015\u0001\u0014\u0005\u0009\u002a\u0014\u009e\u0015\u0002\u0014" +
                "\u000a\u0009\u0006\u0014\u0024\u0015\u0004\u0014\u0024\u0015\u0004\u0014\u0028\u0015\u0008\u0014" +
                "\u0034\u0015\u009c\u0014\u0037\u0015\u0009\u0014\u0016\u0015\u000a\u0014\u0008\u0015\u0098\u0014" +
                "\u0006\u0015\u0002\u0014\u0001\u0015\u0001\u0014\u002c\u0015\u0001\u0014\u0002\u0015\u0003\u0014" +
                "\u0001\u0015\u0002\u0014\u0017\u0015\u0002\u0014\u0008\u0009\u0017\u0015\u0002\u0014\u0007\u0009" +
                "\u001f\u0015\u0008\u0014\u0009\u0009\u0030\u0014\u0013\u0015\u0001\u0014\u0002\u0015\u0005\u0014" +
                "\u0005\u0009\u0016\u0015\u0006\u0009\u0004\u0014\u001a\u0015\u0046\u0014\u0038\u0015\u0004\u0014" +
                "\u0002\u0009\u0002\u0015\u0010\u0009\u0002\u0014\u002e\u0009\u0001\u0015\u000f\u0014\u0004\u0015" +
                "\u0001\u0014\u0003\u0015\u0001\u0014\u001d\u0015\u000a\u0014\u0009\u0009\u0017\u0014\u001d\u0015" +
                "\u0002\u0009\u0001\u0014\u001d\u0015\u0003\u0009\u0020\u0014\u0008\u0015\u0001\u0014\u001c\u0015" +
                "\u0006\u0014\u0005\u0009\u0010\u0014\u0036\u0015\u000a\u0014\u0016\u0015\u0002\u0014\u0008\u0009" +
                "\u0013\u0015\u0005\u0014\u0008\u0009\u0012\u0015\u0017\u0014\u0007\u0009\u0050\u0014\u0049\u0015" +
                "\u0037\u0014\u0033\u0015\u000d\u0014\u0033\u0015\u0007\u0014\u0006\u0009\u0024\u0015\u000c\u0014" +
                "\u000a\u0009\u0126\u0014\u001f\u0009\u0081\u0014\u001d\u0015\u000a\u0009\u0001\u0015\u0008\u0014" +
                "\u0016\u0015\u000b\u0014\u0004\u0009\u008b\u0014\u0017\u0015\u000c\u0014\u0035\u0015\u001a\u0014" +
                "\u001e\u0009\u0013\u0014\u002d\u0015\u0020\u0014\u0019\u0015\u0007\u0014\u000a\u0009\u0009\u0014" +
                "\u0024\u0015\u000f\u0014\u000a\u0009\u0004\u0014\u0001\u0015\u000b\u0014\u0023\u0015\u0003\u0014" +
                "\u0001\u0015\u000c\u0014\u0030\u0015\u000e\u0014\u0004\u0015\u000b\u0014\u000a\u0009\u0001\u0015" +
                "\u0001\u0014\u0001\u0015\u0004\u0014\u0014\u0009\u000b\u0014\u0012\u0015\u0001\u0014\u0019\u0015" +
                "\u0054\u0014\u0007\u0015\u0001\u0014\u0001\u0015\u0001\u0014\u0004\u0015\u0001\u0014\u000f\u0015" +
                "\u0001\u0014\u000a\u0015\u0007\u0014\u002f\u0015\u0011\u0014\u000a\u0009\u000b\u0014\u0008\u0015" +
                "\u0002\u0014\u0002\u0015\u0002\u0014\u0016\u0015\u0001\u0014\u0007\u0015\u0001\u0014\u0002\u0015" +
                "\u0001\u0014\u0005\u0015\u0003\u0014\u0001\u0015\u0012\u0014\u0001\u0015\u000c\u0014\u0005\u0015" +
                "\u009e\u0014\u0035\u0015\u0012\u0014\u0004\u0015\u0005\u0014\u000a\u0009\u0005\u0014\u0001\u0015" +
                "\u0020\u0014\u0030\u0015\u0014\u0014\u0002\u0015\u0001\u0014\u0001\u0015\u0008\u0014\u000a\u0009" +
                "\u00a6\u0014\u002f\u0015\u0029\u0014\u0004\u0015\u0024\u0014\u0030\u0015\u0014\u0014\u0001\u0015" +
                "\u000b\u0014\u000a\u0009\u0026\u0014\u002b\u0015\u000d\u0014\u0001\u0015\u0007\u0014\u000a\u0009" +
                "\u0036\u0014\u001b\u0015\u0015\u0014\u000c\u0009\u00c4\u0014\u002c\u0015\u0074\u0014\u0040\u0015" +
                "\u0013\u0009\u000c\u0014\u0001\u0015\u00a0\u0014\u0008\u0015\u0002\u0014\u0027\u0015\u0010\u0014" +
                "\u0001\u0015\u0001\u0014\u0001\u0015\u001c\u0014\u0001\u0015\u000a\u0014\u0028\u0015\u0007\u0014" +
                "\u0001\u0015\u0015\u0014\u0001\u0015\u000b\u0014\u002e\u0015\u0013\u0014\u0001\u0015\u0022\u0014" +
                "\u0039\u0015\u0007\u0014\u0009\u0015\u0001\u0014\u0025\u0015\u0011\u0014\u0001\u0015\u000f\u0014" +
                "\u001d\u0009\u0005\u0014\u001e\u0015\u0070\u0014\u0007\u0015\u0001\u0014\u0002\u0015\u0001\u0014" +
                "\u0026\u0015\u0015\u0014\u0001\u0015\u0009\u0014\u000a\u0009\u0006\u0014\u0006\u0015\u0001\u0014" +
                "\u0002\u0015\u0001\u0014\u0020\u0015\u000e\u0014\u0001\u0015\u0007\u0014\u000a\u0009\u0136\u0014" +
                "\u0013\u0015\u00cd\u0014\u0015\u0009\u002b\u0014\u009a\u0015\u0066\u0014\u006f\u0009\u0011\u0014" +
                "\u00c4\u0015\u00bc\u0014\u002f\u0015\u00d1\u0014\u0047\u0015\u00b9\u0014\u0039\u0015\u0007\u0014" +
                "\u001f\u0015\u0001\u0014\u000a\u0009\u0066\u0014\u001e\u0015\u0012\u0014\u0030\u0015\u0010\u0014" +
                "\u0004\u0015\u000c\u0014\u000a\u0009\u0001\u0014\u0007\u0009\u0001\u0014\u0015\u0015\u0005\u0014" +
                "\u0013\u0015\u00b0\u0014\u0040\u0015\u0017\u0009\u0069\u0014\u004b\u0015\u0005\u0014\u0001\u0015" +
                "\u0042\u0014\u000d\u0015\u0040\u0014\u0002\u0015\u0001\u0014\u0001\u0015\u001c\u0014\u00f8\u0015" +
                "\u0008\u0014\u00f3\u0015\u000d\u0014\u001f\u0015\u0031\u0014\u0003\u0015\u0011\u0014\u0004\u0015" +
                "\u0008\u0014\u018c\u0015\u0004\u0014\u006b\u0015\u0005\u0014\u000d\u0015\u0003\u0014\u0009\u0015" +
                "\u0007\u0014\u000a\u0015\u0146\u0014\u0014\u0009\u006c\u0014\u0019\u0009\u0087\u0014\u0055\u0015" +
                "\u0001\u0014\u0047\u0015\u0001\u0014\u0002\u0015\u0002\u0014\u0001\u0015\u0002\u0014\u0002\u0015" +
                "\u0002\u0014\u0004\u0015\u0001\u0014\u000c\u0015\u0001\u0014\u0001\u0015\u0001\u0014\u0007\u0015" +
                "\u0001\u0014\u0041\u0015\u0001\u0014\u0004\u0015\u0002\u0014\u0008\u0015\u0001\u0014\u0007\u0015" +
                "\u0001\u0014\u001c\u0015\u0001\u0014\u0004\u0015\u0001\u0014\u0005\u0015\u0001\u0014\u0001\u0015" +
                "\u0003\u0014\u0007\u0015\u0001\u0014\u0154\u0015\u0002\u0014\u0019\u0015\u0001\u0014\u0019\u0015" +
                "\u0001\u0014\u001f\u0015\u0001\u0014\u0019\u0015\u0001\u0014\u001f\u0015\u0001\u0014\u0019\u0015" +
                "\u0001\u0014\u001f\u0015\u0001\u0014\u0019\u0015\u0001\u0014\u001f\u0015\u0001\u0014\u0019\u0015" +
                "\u0001\u0014\u0008\u0015\u0002\u0014\u0032\u0009\u002d\u0015\u000a\u0014\u0007\u0015\u0002\u0014" +
                "\u000a\u0009\u0004\u0014\u0001\u0015\u0171\u0014\u002c\u0015\u0004\u0014\u000a\u0009\u0006\u0014" +
                "\u00c5\u0015\u0002\u0014\u0009\u0009\u0030\u0014\u0044\u0015\u0007\u0014\u0001\u0015\u0004\u0014" +
                "\u000a\u0009\u0117\u0014\u003b\u0009\u0001\u0014\u0003\u0009\u0001\u0014\u0004\u0009\u004c\u0014" +
                "\u002d\u0009\u0001\u0014\u000f\u0009\u00c2\u0014\u0004\u0015\u0001\u0014\u001b\u0015\u0001\u0014" +
                "\u0002\u0015\u0001\u0014\u0001\u0015\u0002\u0014\u0001\u0015\u0001\u0014\u000a\u0015\u0001\u0014" +
                "\u0004\u0015\u0001\u0014\u0001\u0015\u0001\u0014\u0001\u0015\u0006\u0014\u0001\u0015\u0004\u0014" +
                "\u0001\u0015\u0001\u0014\u0001\u0015\u0001\u0014\u0001\u0015\u0001\u0014\u0003\u0015\u0001\u0014" +
                "\u0002\u0015\u0001\u0014\u0001\u0015\u0002\u0014\u0001\u0015\u0001\u0014\u0001\u0015\u0001\u0014" +
                "\u0001\u0015\u0001\u0014\u0001\u0015\u0001\u0014\u0001\u0015\u0001\u0014\u0002\u0015\u0001\u0014" +
                "\u0001\u0015\u0002\u0014\u0004\u0015\u0001\u0014\u0007\u0015\u0001\u0014\u0004\u0015\u0001\u0014" +
                "\u0004\u0015\u0001\u0014\u0001\u0015\u0001\u0014\u000a\u0015\u0001\u0014\u0011\u0015\u0005\u0014" +
                "\u0003\u0015\u0001\u0014\u0005\u0015\u0001\u0014\u0011\u0015\u0044\u0014\u000d\u0009\u00f3\u0014" +
                "\u00d7\u0015\u0029\u0014\u0035\u0015\u000b\u0014\u00de\u0015\u0002\u0014\u0182\u0015\u000e\u0014" +
                "\u0131\u0015\u001f\u0014\u001e\u0015\u00e2\u0014"

        private fun zzUnpackcmap_blocks(): IntArray {
            val result = IntArray(30720)
            val offset = 0
            zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result)
            return result
        }

        private fun zzUnpackcmap_blocks(packed: String, offset: Int, result: IntArray): Int {
            var i = 0 /* index in packed string  */
            var j = offset /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                var count = packed[i++].code
                val value = packed[i++].code
                do result[j++] = value while (--count > 0)
            }
            return j
        }

        /**
         * Translates DFA states to action switch labels.
         */
        private val ZZ_ACTION = zzUnpackAction()
        private const val ZZ_ACTION_PACKED_0 =
            "\u0001\u0000\u0001\u0001\u0001\u0002\u0004\u0003\u0001\u0004\u0001\u0005\u0004\u0003\u0001\u0006" +
                "\u0001\u0003\u0001\u0007\u0002\u0008\u0001\u0009\u0004\u0000\u0001\u000a\u0001\u000b\u0001\u000c" +
                "\u0001\u000d\u0001\u000e\u0001\u0000\u0001\u000f\u0001\u0000\u0001\u0009\u0001\u0000"

        private fun zzUnpackAction(): IntArray {
            val result = IntArray(33)
            val offset = 0
            zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result)
            return result
        }

        private fun zzUnpackAction(packed: String, offset: Int, result: IntArray): Int {
            var i = 0 /* index in packed string  */
            var j = offset /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                var count = packed[i++].code
                val value = packed[i++].code
                do result[j++] = value while (--count > 0)
            }
            return j
        }

        /**
         * Translates a state to a row index in the transition table
         */
        private val ZZ_ROWMAP = zzUnpackRowMap()
        private const val ZZ_ROWMAP_PACKED_0 =
            "\u0000\u0000\u0000\u0017\u0000\u002e\u0000\u0017\u0000\u0045\u0000\u005c\u0000\u0073\u0000\u008a" +
                "\u0000\u00a1\u0000\u00b8\u0000\u00cf\u0000\u00e6\u0000\u00fd\u0000\u0017\u0000\u0114\u0000\u012b" +
                "\u0000\u0142\u0000\u0159\u0000\u0170\u0000\u0187\u0000\u005c\u0000\u019e\u0000\u01b5\u0000\u00b8" +
                "\u0000\u0017\u0000\u0017\u0000\u00fd\u0000\u0017\u0000\u01cc\u0000\u0187\u0000\u01e3\u0000\u01e3" +
                "\u0000\u0073"

        private fun zzUnpackRowMap(): IntArray {
            val result = IntArray(33)
            val offset = 0
            zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result)
            return result
        }

        private fun zzUnpackRowMap(packed: String, offset: Int, result: IntArray): Int {
            var i = 0 /* index in packed string  */
            var j = offset /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                val high = packed[i++].code shl 16
                result[j++] = high or packed[i++].code
            }
            return j
        }

        /**
         * The transition table of the DFA
         */
        private val ZZ_TRANS = zzUnpackTrans()
        private const val ZZ_TRANS_PACKED_0 =
            "\u0001\u0002\u0002\u0003\u0002\u0004\u0001\u0005\u0001\u0004\u0001\u0006\u0001\u0007\u0001\u0008" +
                "\u0001\u0004\u0002\u0009\u0001\u000a\u0001\u000b\u0001\u000c\u0001\u0004\u0001\u000d\u0001\u000e" +
                "\u0001\u000f\u0001\u0004\u0001\u0010\u0019\u0000\u0002\u0003\u001d\u0000\u0001\u0011\u0001\u0000" +
                "\u0002\u0012\u0013\u0000\u0001\u0013\u0015\u0000\u0001\u0014\u0015\u0000\u0001\u0015\u0001\u0000" +
                "\u0001\u0008\u0002\u0000\u0001\u0016\u0014\u0000\u0001\u0017\u0002\u0009\u0008\u0000\u0001\u0010" +
                "\u000e\u0000\u0001\u0018\u000b\u0000\u0007\u0019\u0001\u0000\u0001\u0019\u0002\u0000\u0007\u0019" +
                "\u0012\u0000\u0001\u001a\u0018\u0000\u0001\u001b\u0018\u0000\u0001\u001c\u000e\u0000\u0002\u0010" +
                "\u0008\u0000\u0001\u0010\u000a\u0000\u0001\u0011\u0018\u0000\u0002\u0012\u0003\u0000\u0001\u001d" +
                "\u000f\u0000\u0001\u0013\u0002\u0000\u0001\u0016\u000d\u0000\u0001\u001e\u0001\u0000\u0004\u001e" +
                "\u0001\u0000\u0004\u001e\u0001\u0000\u0002\u001e\u000c\u0000\u0001\u001f\u0002\u0000\u0001\u0020" +
                "\u0015\u0000\u0001\u0021\u0019\u0000\u0002\u0012\u0013\u0000\u0001\u0020\u000d\u0000"

        private fun zzUnpackTrans(): IntArray {
            val result = IntArray(506)
            val offset = 0
            zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result)
            return result
        }

        private fun zzUnpackTrans(packed: String, offset: Int, result: IntArray): Int {
            var i = 0 /* index in packed string  */
            var j = offset /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                var count = packed[i++].code
                var value = packed[i++].code
                value--
                do result[j++] = value while (--count > 0)
            }
            return j
        }

        /** Error code for "Unknown internal scanner error".  */
        private const val ZZ_UNKNOWN_ERROR = 0

        /** Error code for "could not match input".  */
        private const val ZZ_NO_MATCH = 1

        /** Error code for "pushback value was too large".  */
        private const val ZZ_PUSHBACK_2BIG = 2

        /**
         * Error messages for [.ZZ_UNKNOWN_ERROR], [.ZZ_NO_MATCH], and
         * [.ZZ_PUSHBACK_2BIG] respectively.
         */
        private val ZZ_ERROR_MSG = arrayOf(
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large",
        )

        /**
         * ZZ_ATTRIBUTE[aState] contains the attributes of state `aState`
         */
        private val ZZ_ATTRIBUTE = zzUnpackAttribute()
        private const val ZZ_ATTRIBUTE_PACKED_0 =
            "\u0001\u0000\u0001\u0009\u0001\u0001\u0001\u0009\u0009\u0001\u0001\u0009\u0005\u0001\u0004\u0000" +
                "\u0001\u0001\u0002\u0009\u0001\u0001\u0001\u0009\u0001\u0000\u0001\u0001\u0001\u0000\u0001\u0001" +
                "\u0001\u0000"

        private fun zzUnpackAttribute(): IntArray {
            val result = IntArray(33)
            val offset = 0
            zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result)
            return result
        }

        private fun zzUnpackAttribute(packed: String, offset: Int, result: IntArray): Int {
            var i = 0 /* index in packed string  */
            var j = offset /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                var count = packed[i++].code
                val value = packed[i++].code
                do result[j++] = value while (--count > 0)
            }
            return j
        }

        /**
         * Translates raw input code points to DFA table row
         */
        private fun zzCMap(input: Int): Int {
            val offset = input and 255
            return if (offset == input) ZZ_CMAP_BLOCKS[offset] else ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input shr 8] or offset]
        }

        /**
         * Reports an error that occurred while scanning.
         *
         *
         * In a well-formed scanner (no or only correct usage of `yypushback(int)` and a
         * match-all fallback rule) this method will only be called with things that
         * "Can't Possibly Happen".
         *
         *
         * If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
         * scanner etc.).
         *
         *
         * Usual syntax/scanner level error handling should be done in error fallback rules.
         *
         * @param errorCode the code of the error message to display.
         */
        private fun zzScanError(errorCode: Int) {
            val message = try {
                ZZ_ERROR_MSG[errorCode]
            } catch (e: Throwable) {
                ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR]
            }
            throw UnknownState(message)
        }
    }
}
